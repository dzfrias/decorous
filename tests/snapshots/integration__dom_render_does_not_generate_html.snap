---
source: tests/tests.rs
expression: all
---

---input.decor---
#h1:This is a page

#div[class="green"]
  #p Hello, my name is #em[class="red"] Diego! /em /p
/div

---out.js---
const dirty = new Uint8Array(new ArrayBuffer(0));
function create_main_block(target, anchor) {
function mount(target, newNode, anchor) {
target.insertBefore(newNode, anchor || null);
}
const e0 = document.createElement("h1");
e0.textContent = "This is a page";
const e2 = document.createTextNode("\n\n");
const e3 = document.createElement("div");
e3.innerHTML = `<p >  Hello, my name is   <em class="red">  Diego!</em></p>
`;
e3.setAttribute("class", "green")
const e9 = document.createTextNode(" ");
mount(target, e0, anchor);
mount(target, e2, anchor);
mount(target, e3, anchor);
mount(target, e9, anchor);
return {
u(dirty) {
},
d() {
e0.parentNode.removeChild(e0);
e2.parentNode.removeChild(e2);
e3.parentNode.removeChild(e3);
e9.parentNode.removeChild(e9);
}
};
}
function __init_ctx() {

return [];
}
const ctx = __init_ctx();
const fragment = create_main_block(document.getElementById("input"));
let updating = false;
function __schedule_update(ctx_idx, val) {
ctx[ctx_idx] = val;
dirty[Math.max(Math.ceil(ctx_idx / 8) - 1, 0)] |= 1 << (ctx_idx % 8);
if (updating) return;
updating = true;
Promise.resolve().then(() => {
fragment.u(dirty);
updating = false;
dirty.fill(0);
});
}

