---
source: crates/decorous-backend/src/prerender/mod.rs
expression: "format!(\"{}\\n---\\n{}\", String :: from_utf8(js_out).unwrap(), String ::\n    from_utf8(html_out).unwrap())"
---
const dirty = new Uint8Array(new ArrayBuffer(0));
function replace(node) {
const text = document.createTextNode("");
node.replaceWith(text);
return text;
}
function create_0_block(target, anchor) {
function mount(target, newNode, anchor) {
target.insertBefore(newNode, anchor || null);
}
const e1 = document.createTextNode(ctx[0]);
const e2 = document.createTextNode(" ");
mount(target, e1, anchor);
mount(target, e2, anchor);
return {
u(dirty) {
if (true) e1.data = ctx[0];
},
d() {
e1.parentNode.removeChild(e1);
e2.parentNode.removeChild(e2);
}
};
}

const elems = {"0":replace(document.getElementById("0")),"0_block":[],};
function __init_ctx() {
return [undefined];
}
const ctx = __init_ctx();
let updating = false;
dirty.fill(255);
__update(dirty);
dirty.fill(0);
function __update(dirty) {
let i = 0; for (const v of ([1, 2, 3])) { if (i >= elems["0_block"].length) { elems["0_block"][i] = create_0_block(elems["0"].parentNode, elems["0"]); } ctx[0] = v; elems["0_block"][i].u(dirty); i += 1; } elems["0_block"].slice(i).forEach((b) => b.d()); elems["9_block"].length = i;
}
function __schedule_update(ctx_idx, val) {
ctx[ctx_idx] = val;
dirty[Math.max(Math.ceil(ctx_idx / 8) - 1, 0)] |= 1 << (ctx_idx % 8);
if (updating) return;
updating = true;
Promise.resolve().then(() => {
__update(dirty);
updating = false;
dirty.fill(0);
});
}

---
<span id="0"></span>
